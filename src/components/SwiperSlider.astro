---
// Type definition for equipment items
interface EquipmentItem {
  id: number;
  name: string;
  quantity: string;
  image: string;
  alt: string;
}

interface Props {
  equipmentData: EquipmentItem[];
}

const { equipmentData } = Astro.props;
---

<div class="equipment-slider relative">
  <div class="swiper-wrapper">
    {equipmentData.map((item) => (
      <div class="swiper-slide transition-transform duration-300">
        <div class="flex flex-col items-center justify-center gap-6 px-8">
          <!-- Image Container with rounded corners -->
          <div class="relative w-full max-w-md aspect-square">
            <div class="absolute inset-0 bg-gradient-to-br from-black/5 to-black/20 rounded-[80px]" />
            <img
              src={item.image}
              alt={item.alt}
              loading="lazy"
              class="relative w-full h-full object-contain rounded-[80px] drop-shadow-2xl"
            />
          </div>

          <!-- Text Content -->
          <div class="text-center space-y-2">
            <h3 class="text-2xl md:text-3xl font-bold text-gray-900">
              {item.name}
            </h3>
            <p class="text-lg md:text-xl text-gray-800">
              {item.quantity}
            </p>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Navigation Buttons -->
  <button
    class="swiper-button-prev transition-transform duration-300 hover:scale-110"
    aria-label="Previous slide"
  ></button>

  <button
    class="swiper-button-next transition-transform duration-300 hover:scale-110"
    aria-label="Next slide"
  ></button>

  <!-- Pagination Dots -->
  <div class="swiper-pagination !bottom-0 !relative mt-8"></div>
</div>

<script>
  // Import Swiper and its modules. Astro will handle bundling this.
  import Swiper from "swiper";
  import { Navigation, Pagination, Autoplay } from "swiper/modules";
  
  // Initialize Swiper
  new Swiper(".equipment-slider", {
    modules: [Navigation, Pagination, Autoplay],
    slidesPerView: 1,
    spaceBetween: 30,
    loop: true,
    grabCursor: true,
    centeredSlides: true,
    watchSlidesProgress: true,
    navigation: { nextEl: ".swiper-button-next", prevEl: ".swiper-button-prev" },
    pagination: { el: ".swiper-pagination", clickable: true },
    breakpoints: { 640: { slidesPerView: 1 }, 768: { slidesPerView: 2, spaceBetween: 40 }, 1024: { slidesPerView: 3, spaceBetween: 50 } },
    on: {
      setTranslate(swiper, translate) {
        const scaleStep = 0.2; // (1.2 - 1)
        const zIndexMax = swiper.slides.length;
        // Define a more specific type for slide elements that includes the 'progress' property
        const slides = swiper.slides as (HTMLElement & { progress: number })[];

        for (let i = 0; i < slides.length; i += 1) {
          const slideEl = swiper.slides[i];
          const slideProgress = slideEl.progress;
          const absProgress = Math.abs(slideProgress);
          slideEl.style.transform = `scale(${1 - absProgress * scaleStep})`;
        }
      },
    },
  });
</script>
